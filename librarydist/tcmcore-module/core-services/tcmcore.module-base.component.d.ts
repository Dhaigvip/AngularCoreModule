import { AfterViewInit, NgZone } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { ToastrService } from 'ngx-toastr';
import { TranslateService } from 'ng2-translate';
import { CacheData, CacheObject, PageSettings, SearchRepository, ControlSettings, ErrorDTO } from '../tcmcore-objects/tcmcore.domain.objects';
import { IUserSettingsService, IStaticDataService, INavigationService, IWindowRef, IModuleBaseComponent, IThemeService, ILogService, CoreState, ICacheService, IAuthService, IConfigService } from "../tcmcore-objects/tcmcore.domain.interfaces";
import { MatSnackBar } from '@angular/material';
import { Store } from '@ngrx/store';
export declare abstract class ModuleBaseComponent implements IModuleBaseComponent, AfterViewInit {
    protected pageId: any;
    protected moduleName: string;
    protected ServiceLocator: any;
    pageSettings: PageSettings;
    lastQuery: SearchRepository;
    lastSubQuery: any;
    filter: any;
    matcher: any;
    userSettingsService: IUserSettingsService;
    staticDataService: IStaticDataService;
    navigation: INavigationService;
    cacheService: ICacheService;
    configService: IConfigService;
    authService: IAuthService;
    logService: ILogService;
    translate: TranslateService;
    toastrService: ToastrService;
    themeService: IThemeService;
    snackBar: MatSnackBar;
    currentSection: string;
    theme: any;
    router: Router;
    route: ActivatedRoute;
    winRef: IWindowRef;
    ticker: any;
    snackBarRef: any;
    zone: NgZone;
    store: Store<CoreState>;
    inboxItem: any;
    constructor(pageId: any, moduleName: string, ServiceLocator: any);
    ngOnDestry(): void;
    CanUpdate: () => boolean;
    CanCreate: () => boolean;
    onSectionChange(sectionId: string): void;
    scrollTo(section: any): void;
    NotifyUserForSaveChange: () => void;
    openSnackBar(message: string, action: string): void;
    abstract CheckIfDirty(): boolean;
    abstract Save(): void;
    ngOnInit(): void;
    translateDecode(text: any): any;
    convertCharCodes: (stringToFormat: any) => any;
    htmlDecode: (value: any) => any;
    htmlEncode: (value: any) => any;
    ngAfterViewInit(): void;
    private s4;
    guid: () => string;
    GetThemeColor: (themeName: any) => string;
    GetPersistenceForControl: (controlId: any) => any;
    UpdatePersistenceForControl: (controlPersistenceObj: ControlSettings) => void;
    GetUserSettingsForPage: () => PageSettings;
    StrToDate: (str: any) => Date;
    GetStaticData: (key: String) => CacheData;
    GetStaticDataList: (keys: string[]) => CacheData[];
    GetStaticDataItems: (key: string) => CacheObject[];
    NotifySuccess: (message: string) => void;
    NotifyErrorMessage: (message: string) => void;
    NotifyError: (errors: ErrorDTO[]) => void;
    NotifyWarning: (message: string) => void;
    NotifyInfo: (message: string) => void;
    logObject(message: string, obj: any): void;
    log(message: string): void;
    warn(message: string): void;
    info(message: string): void;
    error(message: string): void;
    debug(message: string): void;
}
